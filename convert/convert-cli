#!/usr/bin/env bash
set -o errexit -o pipefail -o noclobber -o nounset

function show_help {
  printf "Usage: ./convert-cli [options]\n\n"
  printf "Options:\n\n"
  printf " -h\n    Displays this help\n\n"
  printf " -i | --input [directory]\n    Specifies the input directory. Defaults to the current working directory.\n\n"
  printf " -d | --dll [filename]\n    Specifies the LinVst shared library to use for wrapping. Defaults to the linvst.so found in the script directory.\n\n"
  printf " -s | --symlink\n    Creates symbolic links instead of hard copies.\n\n"
  printf " -f | --force\n    Force overwrites existing wrappers.\n\n"
  printf " -r | --recursive\n    Recursively scans for VST dlls in the given input directory.\n\n"
  printf " -c | --clean\n    Removes all existing wrappers.\n\n"
}

! getopt --test > /dev/null
if [[ ${PIPESTATUS[0]} -ne 4 ]]; then
    echo 'Your environment does not seem to support getopt.'
    exit 1
fi

OPTIONS=d:i:rscfh
LONGOPTS=dll:,input:,recursive,symlink,clean,force,help

! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@")
if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
    exit 2
fi
eval set -- "$PARSED"

# Default arguments
folder=. dll=./linvst.so recursive=0 dllSet=0 symlink=0 clean=0 force=0

while true; do
    case "$1" in
        -d|--dll)
            eval dll="$2"
            dllSet=1
            shift 2
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        -f|--force)
            force=1
            shift
            ;;
        -i|--input)
            eval folder="$2"
            shift 2
            ;;
        -r|--recursive)
            recursive=1
            shift
            ;;
        -s|--symlink)
            symlink=1
            shift
            ;;
        -c|--clean)
            clean=1
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "I don't know what happened."
            exit 3
            ;;
    esac
done

# Sanitize input
folder=$(readlink -f ${folder})
dll=$(readlink -f ${dll})

printf "Creating LinVST wrappers for DLL files found in ${folder}.\n"

if [ ${recursive} == 1 ]; then echo "Recursive mode enabled.";
else printf "Recursive mode disabled.\n"
fi

if [ ${dllSet} == 0 ] && [ ! -e "${dll}" ]; then
  printf "Trying to detect LinVST shared library ...\n"
  dll=$(dirname "${0}")/linvst.so
fi

if [ ! -e "${dll}" ]; then
  printf "Error: Could not find LinVST shared library at ${dll}.\n"
  printf "Try specify another path with --dll or create a symlink at the given location.\n"
  exit 1
fi

printf "Using LinVST DLL at ${dll}.\n"

findArgs=""
if [ ${recursive} == 0 ]; then
  findArgs="-maxdepth 1"
fi

printf '\n'

find "${folder}" ${findArgs} -type f -iname '*.dll' -print0 |
while IFS= read -r -d '' file; do
    wrappedFile="$(dirname "${file}")/$(basename "${file}" .dll).so"

    if [ -e "${wrappedFile}" ]; then
      if [ ${force} != 1 ] && [ ${clean} != 1 ]; then
        # Don't overwrite without force.
        printf "${file} is already wrapped, skipping.\n"
        continue
      fi
      printf 'Unlinking previous wrapper at %s.\n' "${wrappedFile}"
      unlink "${wrappedFile}"
    fi

    if [ $clean == 1 ]; then
      # Skip linking, just clean-up the directory.
      continue
    fi

    if [ ${symlink} == 1 ]; then
      printf 'Wrapping %s (symlink)...\n' "${file}"
      ln -s "${dll}" "${wrappedFile}"
    else
      printf 'Wrapping %s (hard copy)...\n' "${file}"
      cp "${dll}" "${wrappedFile}"
    fi
done

printf '\nAll done.\n'
